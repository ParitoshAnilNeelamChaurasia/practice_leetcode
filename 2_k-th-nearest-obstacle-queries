// https://leetcode.com/problems/k-th-nearest-obstacle-queries/description/

class Solution {
public:
    vector<int> resultsArray(vector<vector<int>>& queries, int k) {
        int n = queries.size() ;

        vector<int> ans ;
        priority_queue<int> pq ;

        for(int i = 0 ; i < n ; ++i)
        {
            pq.push(abs(abs(queries[i][0]) + abs(queries[i][1]))) ;

            if(pq.size() < k)
            {
                ans.push_back(-1) ;
            }
            else
            {
                if(pq.size() == k)
                {
                    ans.push_back(pq.top()) ;
                }
                else
                {
                    pq.pop() ;
                    ans.push_back(pq.top()) ;
                }
            }
        }
            return ans ;
    }
};
